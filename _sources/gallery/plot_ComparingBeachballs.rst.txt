
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_ComparingBeachballs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_ComparingBeachballs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_ComparingBeachballs.py:


Comparing Beachball Focal Mechanism Solutions
==============================================
In this example, we will perform a quick and dirty amplitude-based inversion
for the moment tensor and visualise the inverted focal mechanism using
the commonly used beachball plot.

As this is a plotting example, we will tackle the problem as an inverse-crime.
For a more scientific example of how to perform amplitude-based moment-tensor
inversion, look into the tutorial [XXX] which uses data generated via finite-
difference modelling.

.. GENERATED FROM PYTHON SOURCE LINES 13-25

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np
    from fracspy.mtsolvers.homo_mti import collect_source_angles, pwave_Greens_comp
    from fracspy.mtsolvers.mtutils import get_mt_computation_dict
    from fracspy.mtsolvers.mtutils import get_magnitude
    from fracspy.mtsolvers.mtai import *
    from fracspy.visualisation.momenttensor_plots import MTBeachball_comparisonplot


    plt.close("all")
    np.random.seed(0)








.. GENERATED FROM PYTHON SOURCE LINES 26-28

For this inverse-crime, we will use our inverse operator in the forward mode
to generate the data we will invert.

.. GENERATED FROM PYTHON SOURCE LINES 28-47

.. code-block:: Python



    # Velocity Model
    nx, ny, nz = 47, 51, 75
    dx, dy, dz = 4, 4, 4
    x, y, z = np.arange(nx)*dx, np.arange(ny)*dy, np.arange(nz)*dz

    vp = 1000
    vel = vp * np.ones([nx, ny, nz])

    # RECEIVERS
    grid_rx_locs = np.linspace(dx, (dx*nx)-2*dx, 11)
    grid_ry_locs = np.linspace(dy, (dy*ny)-2*dy, 13)
    rx, ry, rz = np.meshgrid(grid_rx_locs,
                             grid_ry_locs,
                             dz)
    recs = np.vstack((rx.flatten(), ry.flatten(), rz.flatten()))
    nr = recs.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 48-52

Initialise all the necessary components for the inversion.

To learn more about what these components are and their purpose, see the
tutorial on amplitude-based moment tensor inversion: [LINK]

.. GENERATED FROM PYTHON SOURCE LINES 52-73

.. code-block:: Python


    # Amplitude terms for inversion
    gamma_sourceangles, dist_table = collect_source_angles(x,
                                                           y,
                                                           z,
                                                           reclocs=recs,
                                                           nc=3)
    # Source Parameters
    omega_p = 30  # Central frequency
    sloc_ind = [nx//2, ny//2, nz//2]  # As indices of velocity model
    MT_comp_dict = get_mt_computation_dict()  # Moment Tensor Dictionary for house-keeping purposes
    # Compute the p-wave Green's functions
    Gz = pwave_Greens_comp(gamma_sourceangles,
                           dist_table,
                           sloc_ind,
                           vel,
                           MT_comp_dict,
                           comp_gamma_ind=2,
                           omega_p=omega_p,
                           )








.. GENERATED FROM PYTHON SOURCE LINES 74-76

Create the forward data based on a chosen moment tensor, in this case the
forward data is only the p-wave arrival amplitude

.. GENERATED FROM PYTHON SOURCE LINES 76-99

.. code-block:: Python

    mt_xx = 0
    mt_yy = 0
    mt_zz = 0
    mt_xy = -1
    mt_xz = 0
    mt_yz = 0
    mt = [mt_xx, mt_yy, mt_zz, mt_xy, mt_xz, mt_yz]
    print('MT for forward modelling: ', mt)

    # Forward (Note, this will only give the p-amplitudes of the arrival
    p_amps_true = frwrd_mtmodelling(Gz, mt)

    # Compute seismic moment and moment magnitude for the true tensor
    m0, mw = get_magnitude(mt)

    # Print with LaTeX formatting
    print('Corresponding seismic moment M_0: ', m0)
    print('Corresponding moment magntude M_w: ', mw)

    # So this is not super boring let's add a tiny bit of noise
    p_amps_noisy = p_amps_true + 0.25*((np.random.random(len(p_amps_true))-0.5)*np.mean(abs(p_amps_true)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MT for forward modelling:  [0, 0, 0, -1, 0, 0]
    Corresponding seismic moment M_0:  1.0
    Corresponding moment magntude M_w:  -6.066666666666666




.. GENERATED FROM PYTHON SOURCE LINES 100-101

Perform inverse operation with our least-squares MT solver

.. GENERATED FROM PYTHON SOURCE LINES 101-110

.. code-block:: Python

    mt_est = lsqr_mtsolver(Gz, p_amps_noisy)

    # Compute seismic moment and moment magnitude for the estimated tensor
    m0_est, mw_est = get_magnitude(mt_est)

    print('Estimated seismic moment M_0: ', m0_est)
    print('Estimated moment magntude M_w: ', mw_est)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Estimated seismic moment M_0:  1.0025545126232864
    Estimated moment magntude M_w:  -6.065928002571377




.. GENERATED FROM PYTHON SOURCE LINES 111-113

Now we are ready to plot the comparison between our known MT (mt) and our
estimate MT (mt_est)

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: Python


    MTBeachball_comparisonplot(mt, mt_est)
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_plot_ComparingBeachballs_001.png
   :alt: True Focal Mechanism, Estimated Focal Mechanism
   :srcset: /gallery/images/sphx_glr_plot_ComparingBeachballs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-119

NB: Just a quick plot to show how shifted the selected arrival amplitudes are

.. GENERATED FROM PYTHON SOURCE LINES 119-126

.. code-block:: Python


    fig = plt.figure()
    plt.scatter(x=np.arange(len(p_amps_true)), y=p_amps_true, c='r', label='true')
    plt.scatter(x=np.arange(len(p_amps_true)), y=p_amps_noisy, c='b', label='noisy')
    plt.legend()
    plt.xlabel('Receiver #')
    plt.ylabel('P-Amplitude')
    plt.title('P-Wave Arrival Amplitudes')


.. image-sg:: /gallery/images/sphx_glr_plot_ComparingBeachballs_002.png
   :alt: P-Wave Arrival Amplitudes
   :srcset: /gallery/images/sphx_glr_plot_ComparingBeachballs_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'P-Wave Arrival Amplitudes')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.688 seconds)


.. _sphx_glr_download_gallery_plot_ComparingBeachballs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ComparingBeachballs.ipynb <plot_ComparingBeachballs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ComparingBeachballs.py <plot_ComparingBeachballs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_ComparingBeachballs.zip <plot_ComparingBeachballs.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
