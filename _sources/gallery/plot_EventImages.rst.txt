
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_EventImages.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_EventImages.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_EventImages.py:


Event Volume Plotting 
=====================
This example shows how to visualise microseismic event characteristics, i.e., semblence,
as a volume.

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.ndimage import gaussian_filter
    from fracspy.visualisation.eventimages import locimage3d
    from fracspy.location.utils import get_max_locs









.. GENERATED FROM PYTHON SOURCE LINES 15-17

Setting up model
^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: Python


    # Define subsurface
    nx, ny, nz = 60, 65, 75
    dx = dy = dz = 5
    x = np.arange(0,nx)*dx
    y = np.arange(0,ny)*dy
    z = np.arange(0,nz)*dz

    source_location = 25, 30, 50  # x,y,z location 








.. GENERATED FROM PYTHON SOURCE LINES 28-32

Simple Example
^^^^^^^^^^^^^^
In this example we have a noisy background but the coherent energy, and 
the image maxima correspond to our source location

.. GENERATED FROM PYTHON SOURCE LINES 32-45

.. code-block:: Python


    noise_inds = np.random.randint(0,nx*ny*nz,size=int(0.05*(nx*ny*nz)))
    noise_flat = np.zeros([nx*ny*nz])
    noise_flat[noise_inds] = np.random.rand(int(0.05*(nx*ny*nz)))
    background_noise = 2*gaussian_filter(noise_flat.reshape([nx,ny,nz]), 
                                       sigma=1, radius=2)

    microseismic_event = np.zeros_like(background_noise)
    microseismic_event[source_location] = 80
    microseismic_event = gaussian_filter(microseismic_event, sigma=2, radius=5)
    microseismic_image = microseismic_event + background_noise









.. GENERATED FROM PYTHON SOURCE LINES 46-49

Perform plotting, here we are going to intersect the volume at the known 
source location. We also provide the limits for the model space using 
the xlim, ylim, and zlim parameters. 

.. GENERATED FROM PYTHON SOURCE LINES 49-61

.. code-block:: Python


    fig, axs = locimage3d(microseismic_image,
                          x0=int(np.round(source_location[0])),
                          y0=int(np.round(source_location[1])),
                          z0=int(np.round(source_location[2])),
                          xlim=[x[0],x[-1]],
                          ylim=[y[0],y[-1]],
                          zlim=[z[0],z[-1]],
                          clipval=[0,1])
    plt.tight_layout()





.. image-sg:: /gallery/images/sphx_glr_plot_EventImages_001.png
   :alt: plot EventImages
   :srcset: /gallery/images/sphx_glr_plot_EventImages_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/FraCSPy/FraCSPy/fracspy/visualisation/eventimages.py:96: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      fig.tight_layout()
    /home/runner/work/FraCSPy/FraCSPy/examples/plot_EventImages.py:58: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      plt.tight_layout()




.. GENERATED FROM PYTHON SOURCE LINES 62-64

Noisy Example - Artifact present in image 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: Python


    artifact_location_center = 22, 35, 25  # x,y,z location 
    artifact_image = np.zeros_like(microseismic_image)
    artifact_image[artifact_location_center] = 200
    artifact_image = gaussian_filter(artifact_image, sigma=3, radius=4)

    microseismic_image_noisy = microseismic_image.copy() + artifact_image








.. GENERATED FROM PYTHON SOURCE LINES 73-76

If we perform slicing at the location of the maxima of the image volume we
will now be slicing over the artifact location, as opposed to the true
source location

.. GENERATED FROM PYTHON SOURCE LINES 76-90

.. code-block:: Python


    max_loc, _ = get_max_locs(microseismic_image_noisy, n_max=5)

    fig, axs = locimage3d(microseismic_image_noisy,
                          x0=int(np.round(max_loc[0])),
                          y0=int(np.round(max_loc[1])),
                          z0=int(np.round(max_loc[2])),
                          xlim=[x[0],x[-1]],
                          ylim=[y[0],y[-1]],
                          zlim=[z[0],z[-1]],
                          clipval=[0,1])
    plt.tight_layout()





.. image-sg:: /gallery/images/sphx_glr_plot_EventImages_002.png
   :alt: plot EventImages
   :srcset: /gallery/images/sphx_glr_plot_EventImages_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/FraCSPy/FraCSPy/examples/plot_EventImages.py:87: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      plt.tight_layout()




.. GENERATED FROM PYTHON SOURCE LINES 91-98

In this instance, it may be preferable to add an additional cross to the plot
to highlight where we believe the source location is, in comparison to the 
maxima for the image volume. 

Note, that the source location is not the location for the plane intersection
the second cross is merely a projection of the expected location, on top of
the intersection.

.. GENERATED FROM PYTHON SOURCE LINES 98-110

.. code-block:: Python



    fig, axs = locimage3d(microseismic_image_noisy,
                          x0=int(np.round(max_loc[0])),
                          y0=int(np.round(max_loc[1])),
                          z0=int(np.round(max_loc[2])),
                          xlim=[x[0],x[-1]],
                          ylim=[y[0],y[-1]],
                          zlim=[z[0],z[-1]],                      
                          secondcrossloc=source_location,
                          clipval=[0,1])
    plt.tight_layout()



.. image-sg:: /gallery/images/sphx_glr_plot_EventImages_003.png
   :alt: plot EventImages
   :srcset: /gallery/images/sphx_glr_plot_EventImages_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/FraCSPy/FraCSPy/examples/plot_EventImages.py:109: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      plt.tight_layout()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.907 seconds)


.. _sphx_glr_download_gallery_plot_EventImages.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_EventImages.ipynb <plot_EventImages.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_EventImages.py <plot_EventImages.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_EventImages.zip <plot_EventImages.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
