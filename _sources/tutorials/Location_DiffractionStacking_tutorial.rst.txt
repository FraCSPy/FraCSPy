
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/Location_DiffractionStacking_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_Location_DiffractionStacking_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_Location_DiffractionStacking_tutorial.py:


Diffraction Stacking Localisation - Simple scenario
===================================================
This tutorial illustrates how to perform source localisation using a diffraction stacking based on semblance.

In this tutorial we will consider a simple scenario where the subsurface is homogenous,
and traveltimes are computed analytically as

.. math::
        t(\mathbf{x_r},\mathbf{x_s}) = \frac{d(\mathbf{x_r},\mathbf{x_s})}{v}

where :math:`d(\mathbf{x_r},\mathbf{x_s})` is the distance between the source and receiver, and :math:`v`
is velocity (e.g. P-wave velocity :math:`v_p`).

The waveforms are computed using the FD modelling.

.. GENERATED FROM PYTHON SOURCE LINES 20-22

Load all necessary packages
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-40

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt

    from pylops.utils import dottest
    from pylops.utils.wavelets import ricker

    # Import modelling utils
    from fracspy.modelling.kirchhoff import Kirchhoff

    # Import diffraction stacking utils
    from fracspy.location.utils import dist2rec
    from fracspy.location.migration import semblancediffstack

    # Import visualization utils
    from fracspy.visualisation.traceviz import traceimage
    from fracspy.visualisation.eventimages import locimage3d








.. GENERATED FROM PYTHON SOURCE LINES 41-44

Setup
---------------------------
Velocity Model

.. GENERATED FROM PYTHON SOURCE LINES 44-83

.. code-block:: Python

    nx, ny, nz = 50, 50, 50
    dx, dy, dz = 4, 4, 4
    x, y, z = np.arange(nx)*dx, np.arange(ny)*dy, np.arange(nz)*dz

    v0 = 1000 # initial velocity
    vel = np.ones([nx,ny,nz])*v0

    print(vel.shape)

    # Receivers
    dr_xyz = 4*dx

    grid_rx_locs = np.arange(dx, (dx*nx)-dx, dr_xyz)
    grid_ry_locs = np.arange(dy, (dy*ny)-dy, dr_xyz)

    rx, ry, rz = np.meshgrid(grid_rx_locs,
                             grid_ry_locs,
                             dz) 
    recs = np.vstack((rx.flatten(), ry.flatten(), rz.flatten()))
    nr = recs.shape[1]

    print(recs.shape)

    # Microseismic sources
    sx, sy, sz = [nx//4, ny//2, nz//2]
    microseismic = np.zeros((nx, ny, nz))
    microseismic[sx, sy, sz] = 1.

    # Plot geometry
    plt.figure(figsize=(8, 8))  # set size in inches
    fig = plt.gcf()
    ax = fig.add_subplot(111)
    ax.set_aspect('equal')
    plt.scatter(recs[0],recs[1])
    plt.scatter(sx*dx,sy*dy, marker='*')
    plt.title('Receiver Geometry: map view')
    plt.xlabel('x')
    plt.ylabel('y')




.. image-sg:: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_001.png
   :alt: Receiver Geometry: map view
   :srcset: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (50, 50, 50)
    (3, 144)

    Text(60.347222222222214, 0.5, 'y')



.. GENERATED FROM PYTHON SOURCE LINES 84-86

Generate synthetic data
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 86-119

.. code-block:: Python


    nt = 251
    dt = 0.004
    t = np.arange(nt) * dt
    wav, wavt, wavc = ricker(t[:41], f0=20)

    plt.figure()
    plt.plot(wav)

    # Initialize operator
    Op = Kirchhoff(z=z, 
                   x=x, 
                   y=y, 
                   t=t, 
                   recs=recs, 
                   vel=vel, 
                   wav=wav, 
                   wavcenter=wavc, 
                   mode='eikonal', 
                   engine='numba')

    # check operator with dottest
    _ = dottest(Op, verb=True)

    # Forform forward modelling
    frwddata_1d = Op @ microseismic.flatten().squeeze()
    frwddata = frwddata_1d.reshape(nr,nt)

    fig, ax = traceimage(frwddata, climQ=99.99)
    ax.set_title('Point Receivers')
    fig = ax.get_figure()
    fig.set_size_inches(10, 9.5)  # set size in inches




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_002.png
         :alt: Location DiffractionStacking tutorial
         :srcset: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_003.png
         :alt: Point Receivers
         :srcset: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dot test passed, v^H(Opu)=1958.2274611981386 - u^H(Op^Hv)=1958.2274611981184




.. GENERATED FROM PYTHON SOURCE LINES 120-122

Diffraction stacking
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 122-140

.. code-block:: Python


    # Define search grid
    gx = x
    gy = y
    gz = z

    # Prepare traveltimes
    tt = 1 / v0*dist2rec(recs,gx,gy,gz)
    print(tt.shape)

    # Reshape tt into ttg
    ttg = tt.reshape(nr, -1)
    print(ttg.shape)

    # Perform standard semblance-based diffraction stack
    dstacked, hc = semblancediffstack(data=frwddata, n_xyz=[len(gx),len(gy),len(gz)], tt=tt, dt=dt, nforhc=10)

    # Visualise image volume
    fig,axs = locimage3d(dstacked, x0=sx, y0=sy, z0=sz)


.. image-sg:: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_004.png
   :alt: Location DiffractionStacking tutorial
   :srcset: /tutorials/images/sphx_glr_Location_DiffractionStacking_tutorial_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (144, 50, 50, 50)
    (144, 125000)
    /home/runner/work/FraCSPy/FraCSPy/fracspy/visualisation/eventimages.py:92: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      fig.tight_layout()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 7.278 seconds)


.. _sphx_glr_download_tutorials_Location_DiffractionStacking_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Location_DiffractionStacking_tutorial.ipynb <Location_DiffractionStacking_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Location_DiffractionStacking_tutorial.py <Location_DiffractionStacking_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: Location_DiffractionStacking_tutorial.zip <Location_DiffractionStacking_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
