
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/sourcelocation_lsqr.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_sourcelocation_lsqr.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_sourcelocation_lsqr.py:


LSQR Kirchhoff-based Inversion for Source Location
===================================================
This example shows how to create pre-stack angle gathers using
the `pyfrac.locationsolvers.imaging.lsqr_migration`.

.. GENERATED FROM PYTHON SOURCE LINES 7-73



.. image-sg:: /tutorials/images/sphx_glr_sourcelocation_lsqr_001.png
   :alt: sourcelocation lsqr
   :srcset: /tutorials/images/sphx_glr_sourcelocation_lsqr_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/birniece/Documents/Projects/MicroseismicModelling/MicroseismicProcessing/pyfrac/modelling/kirchhoff.py:255: FutureWarning: A new implementation of Kirchhoff is provided in v2.1.0. This currently affects only the inner working of the operator, end-users can continue using the operator in the same way. Nevertheless, it is now recommended to providethe variables trav (and amp) as a tuples containing the traveltime (and amplitude) tables for sources and receivers separately. This behaviour will eventually become default in version v3.0.0.
      warnings.warn(
    Dot test passed, v^H(Opu)=6884.154078918347 - u^H(Op^Hv)=6884.154078918365






|

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    from pylops.utils import dottest
    from pylops.utils.wavelets import *

    from pyfrac.modelling.kirchhoff import Kirchhoff
    from pyfrac.visualisation.traceviz import traceimage
    from pyfrac.visualisation.eventimages import locimage3d

    r"""
    Set up Problem - Velocity Model + Receiver Geometry
    ===================================================
    For this simple example, let's use a small homogeneous velocity model with a surface receiver array in a 
    gridded formation that fully covers the velocity model.
    """
    # Model Definition
    nx, ny, nz = 50, 50, 50  # Number of dimensions of model
    dx, dy, dz = 4, 4, 4  # Grid spacing of model
    x, y, z = np.arange(nx)*dx, np.arange(ny)*dy, np.arange(nz)*dz  # Model coordinates

    # Velocity Model
    vp = 1000  # P-wave velocity
    vel = np.ones([nx,ny,nz])*vp  # 3D Velocity Model

    # Receiver array
    dr_xyz = 4*dx  # Spacing of receivers as a function of the model step size
    grid_rx_locs = np.arange(dx, (dx*nx)-dx, dr_xyz)  # Get receiver x-coords
    grid_ry_locs = np.arange(dy, (dy*ny)-dy, dr_xyz)  # Get receiver y-coords
    rx, ry, rz = np.meshgrid(grid_rx_locs,
                             grid_ry_locs,
                             dz)
    recs = np.vstack((rx.flatten(), ry.flatten(), rz.flatten()))  # Flatten grid
    nr = recs.shape[1]  # Number of receivers (useful parameter for later)

    # Plot receiver array
    plt.figure()
    plt.scatter(recs[0], recs[1])
    r"""
    Make Kirchhoff imaging operator
    =================================================
    The Kirchhoff imaging operator 
    """
    # Define time parameters
    nt = 251
    dt = 0.004
    t = np.arange(nt)*dt

    # Make source wavelet
    fc = 20  # expected central frequency
    wav, wavt, wavc = ricker(t[:41], f0=20)

    # INITIALISE OPERATOR
    Op = Kirchhoff(z=z,
                   x=x,
                   y=y,
                   t=t,
                   srcs=recs[:, :1],
                   recs=recs,
                   vel=vel,
                   wav=wav,
                   wavcenter=wavc,
                   mode='eikonal',
                   engine='numba')

    # check operator with dottest
    _ = dottest(Op, verb=True)

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.024 seconds)


.. _sphx_glr_download_tutorials_sourcelocation_lsqr.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: sourcelocation_lsqr.ipynb <sourcelocation_lsqr.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: sourcelocation_lsqr.py <sourcelocation_lsqr.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
