import os
import numpy as np


def read_seis(seisfile, nr):
    """
    Reads and reshapes a seismic data file generated using SOFI3D.

    This function reads a seismic data file in plain text format, where the data is expected to be stored as a flat array of values. The file is reshaped into a 2D array based on the specified number of receivers (`nr`) and the calculated number of time samples (`nt`).

    Parameters:
    -----------
    seisfile : str
        The path to the seismic file (in plain text format) generated by SOFI3D.
    nr : int
        The number of receivers, which determines how the seismic data should be reshaped.

    Returns:
    --------
    seis : ndarray
        A 2D numpy array of shape (nr, nt), where `nr` is the number of receivers and `nt` is the number of time samples, containing the seismic data.

    Raises:
    -------
    ValueError :
        If the seismic file cannot be reshaped due to incompatible dimensions, a message will be printed indicating the issue with the number of time samples (`nt`) and receivers (`nr`).
    
    Notes:
    ------
    The seismic file is assumed to be in plain text format, with values organized as a flat 1D array. The function checks that the file has enough samples to be reshaped correctly, and if not, it raises a warning.
    """
    # s_wave_file = os.path.join(data_path,'test.bin.curl')
    seis_flat = np.loadtxt(seisfile)

    # determine number of timesamples and ensure it saved fully
    nt = int(seis_flat.shape[0] / nr)
    try:
        seis_flat.reshape((nr, nt))
    except:
        print('Not good dims \n nt:%i nr:%i \n vz flat:%i' % (nt, nr, seis_flat.shape[0]))

    # Resample to 2D
    seis = seis_flat[:nt * nr].reshape((nr, nt))
    return seis


def write_SOFIrunScript(sofimaster, num_procs, sofi_param_file, outfile, write=True):
    """
    Creates a shell script to run a SOFI3D simulation with MPI parallelization and output management.

    This function generates a bash script that sets up the required directories, runs SOFI3D using MPI for parallelization, merges the generated snapshots, and performs cleanup operations. The generated script can be written to a file or returned as a string.

    Parameters:
    -----------
    sofimaster : str
        Path to the SOFI3D binary master directory, which contains `sofi3D` and `snapmerge` executables.
    num_procs : int
        The number of processes to be used in the MPI parallelization (`mpirun`).
    sofi_param_file : str
        Path to the parameter file for the SOFI3D simulation.
    outfile : str
        The file path where the generated shell script will be saved.
    write : bool, optional
        If True (default), the generated script is written to the `outfile`. If False, only the string representation is returned.

    Returns:
    --------
    sh_script : str
        The generated shell script as a string.

    Notes:
    ------
    - The generated script creates output directories (`outputs/log`, `outputs/snap`, `outputs/su`), runs the SOFI3D simulation using `mpirun`, merges the snapshots, and removes temporary files.
    - If `write=True`, the script is saved to the specified `outfile`.
    """

    sh_script = '''#!/bin/bash

mkdir -p outputs
mkdir -p outputs/log
mkdir -p outputs/snap
mkdir -p outputs/su

sofipath=%s
mpirun -np %i ${sofipath} %s > sofi3D.jout

# Do the snap merge thing
snapmergepath=%s
${snapmergepath} %s

# Clean up the snap files (for memory purposes)
rm -rf ./outputs/snap/**.0*
rm -rf ./outputs/snap/**.1*

# Clean up the distributed models
rm -rf ./inputs/models/**.SOFI3D.**
''' % (os.path.join(sofimaster, 'sofi3D'),
       num_procs,
       sofi_param_file,
       os.path.join(sofimaster, 'snapmerge'),
       sofi_param_file,
       )



    # WRITE TO SHELL SCRIPT FOR FAST EXECUTION
    if write:
        text_file = open(outfile, "wt")
        text_file.writelines(sh_script)
        text_file.close()

    return sh_script


def write_SOFIrunScript_NoSnaps(sofimaster, num_procs, sofi_param_file, outfile, write=True):
    """
    Creates a shell script to run a SOFI3D simulation with MPI parallelization, without snapshot merging.

    This function generates a simplified bash script that sets up the required directories and runs SOFI3D using MPI for parallelization. Unlike the regular script, it does not include snapshot merging or cleanup of temporary snapshot files.

    Parameters:
    -----------
    sofimaster : str
        Path to the SOFI3D binary master directory, which contains the `sofi3D` executable.
    num_procs : int
        The number of processes to be used in the MPI parallelization (`mpirun`).
    sofi_param_file : str
        Path to the parameter file for the SOFI3D simulation.
    outfile : str
        The file path where the generated shell script will be saved.
    write : bool, optional
        If True (default), the generated script is written to the `outfile`. If False, only the string representation is returned.

    Returns:
    --------
    sh_script : str
        The generated shell script as a string.

    Notes:
    ------
    - The generated script creates output directories (`outputs/log`, `outputs/snap`, `outputs/su`), and runs the SOFI3D simulation using `mpirun`.
    - This version does not include snapshot merging or cleanup operations.
    - If `write=True`, the script is saved to the specified `outfile`.
    """

    sh_script = '''#!/bin/bash

mkdir -p outputs
mkdir -p outputs/log
mkdir -p outputs/snap
mkdir -p outputs/su

sofipath=%s
mpirun -np %i ${sofipath} %s > sofi3D.jout

''' % (os.path.join(sofimaster, 'sofi3D'),
       num_procs,
       sofi_param_file,
       )

    # WRITE TO SHELL SCRIPT FOR FAST EXECUTION
    if write:
        text_file = open(outfile, "wt")
        text_file.writelines(sh_script)
        text_file.close()

    return sh_script


def write_SOFIjsonParams(default_strs, monitor_strs, t_str, mod_strs, src_str, bndry_str, outfile, write=True):
    """
    Creates a JSON parameter file string for a SOFI3D simulation.

    This function generates the content of a JSON parameter file for a SOFI3D simulation by combining various input sections, such as default settings, monitoring parameters, time parameters, model descriptions, source configuration, and boundary conditions. The generated JSON content can be written to a file or returned as a string.

    Parameters:
    -----------
    default_strs : str
        The section of the JSON file containing the default simulation parameters.
    monitor_strs : str
        The section of the JSON file specifying monitoring parameters.
    t_str : str
        The section of the JSON file that defines time-related parameters.
    mod_strs : str
        The section of the JSON file that describes the model configuration.
    src_str : str
        The section of the JSON file specifying source parameters.
    bndry_str : str
        The section of the JSON file defining boundary conditions.
    outfile : str
        The file path where the generated JSON parameter file will be saved.
    write : bool, optional
        If True (default), the generated JSON string is written to the `outfile`. If False, only the string representation is returned.

    Returns:
    --------
    SOFIstring : str
        The complete JSON parameter file as a string.

    Notes:
    ------
    - The output JSON is not formatted as strict JSON but follows the structure used in SOFI3D's parameter files.
    - If `write=True`, the JSON parameter file is saved to the specified `outfile`.
    """

    pre_blurb = '''#-----------------------------------------------------------------
#      JSON PARAMETER FILE FOR SOFI3D
#-----------------------------------------------------------------
# description: example of json input file
# description/name of the model: homogeneous full space (hh.c)
#
'''

    string_list = [pre_blurb, '{',
                   default_strs,
                   monitor_strs,
                   t_str,
                   mod_strs,
                   src_str,
                   bndry_str,
                   '}']

    SOFIstring = '\n \n'.join(string_list)

    # WRITE TO JSON FILE
    if write:
        text_file = open(outfile, "wt")
        text_file.writelines(SOFIstring)
        text_file.close()

    return SOFIstring


def get_default_strings(rec_file='./inputs/receiver.dat'):
    """
    Generates default parameter strings for a SOFI3D JSON parameter file.

    This function creates and combines several default configuration sections for a SOFI3D simulation, including checkpointing, finite difference (FD) order, Q-approximation, and receiver settings. These sections are returned as a formatted string to be included in a SOFI3D JSON parameter file.

    Parameters:
    -----------
    rec_file : str, optional
        Path to the receiver file (`receiver.dat`). The default is `./inputs/receiver.dat`. This path is embedded in the receiver section of the JSON parameter string.

    Returns:
    --------
    default_strs : str
        A formatted string containing the default parameter sections (Checkpoints, FD order, Q-approximation, and Receiver) to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The returned string includes several key default settings required for running SOFI3D simulations, such as FD order and receiver setup.
    - The receiver file path is inserted dynamically based on the `rec_file` argument.
    """

    chkpt_str = '''"Checkpoints" : "comment",
    "CHECKPTREAD" : "0",
    "CHECKPTWRITE" : "0",
    "CHECKPT_FILE" : "tmp/checkpoint_sofi3D",'''



    fdorder_str = '''"FD order" : "comment",
    "FDORDER" : "4",
    "FDORDER_TIME" : "2",
    "FDCOEFF" : "2",
    "fdcoeff values: Taylor=1, Holberg=2" : "comment",'''

    q_str = '''"Q-approximation" : "comment",
    "L" : "0",
    "FREF" : "5.0",
    "FL1" : "5.0",
    "TAU" : "0.00001",'''

    rec_str = '''"Receiver" : "comment",
    "SEISMO" : "4",
    "READREC" : "1",
    "REC_FILE" : "%s",
    "REFRECX, REFRECY, REFRECZ" : "0.0 , 0.0 , 0.0",
    "NGEOPH" : "1",
    "REC_ARRAY" : "0", # No array as it is read from the rec file'''%rec_file



    default_strs = '\n \n'.join([chkpt_str,
                                 fdorder_str,
                                 q_str,
                                 rec_str,
                                 ])

    return default_strs


def get_boundary_str(fs=True, npad=30, cpml=True, vppml=3500):
    """
    Generates the boundary condition string for a SOFI3D JSON parameter file.

    This function creates a formatted string defining the boundary conditions for a SOFI3D simulation. It includes settings for free surface, absorbing boundaries, and Convolutional Perfectly Matched Layer (CPML) parameters.

    Parameters:
    -----------
    fs : bool, optional
        Indicates whether to use a free surface boundary condition. Default is `True` (enabled).
    npad : int, optional
        The width of the boundary absorbing layer (in grid points). Default is `30`.
    cpml : bool, optional
        Determines the type of absorbing boundary. If `True` (default), CPML is used. If `False`, standard absorbing boundaries are used.
    vppml : float, optional
        The maximum P-wave velocity used in the CPML formulation. Default is `3500`.

    Returns:
    --------
    bndry_str : str
        A formatted string containing the boundary condition settings to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The parameter `fs` controls the free surface boundary (`FREE_SURF`), with `1` for enabled and `0` for disabled.
    - `cpml` controls the type of absorbing boundary (`ABS_TYPE`), with `1` for CPML and `2` for standard absorbing boundaries.
    - The string includes other parameters like damping, PML width (`FPML`), and CPML velocity (`VPPML`).
    """

    if fs: fsnum=1
    else: fsnum=0
    if cpml: abstype=1
    else: abstype=2

    bndry_str = '''"Boundary Conditions" : "comment",
    "FREE_SURF" : "%i",
    "ABS_TYPE" : "%i",
    "FW" : "%i",
    "DAMPING" : "4.0",
    "FPML" : "20.0",
    "VPPML" : "%.1f",
    "NPOWER" : "4.0",
    "K_MAX_CPML" : "1.0",
    "BOUNDARY" : "0",'''%(fsnum, abstype, npad, vppml)

    return bndry_str


def get_monitor_str(tsnap_params, smgrm_dtfn, expname, sbsmp_xyz=4, snap=True):
    """
    Generates the monitoring parameter string for a SOFI3D JSON parameter file.

    This function creates a formatted string that defines the monitoring settings for a SOFI3D simulation, including snapshots, seismograms, and logging information. The generated string can be included in the SOFI3D JSON parameter file.

    Parameters:
    -----------
    tsnap_params : list or tuple
        A list or tuple containing three values that define the snapshot time parameters:
        - `TSNAP1`: start time for snapshots,
        - `TSNAP2`: end time for snapshots,
        - `TSNAPINC`: time interval between snapshots.
    smgrm_dtfn : int
        The seismogram time sampling function (`NDT`), specifying the time step interval for outputting seismograms.
    expname : str
        The name of the experiment, used for naming output files.
    sbsmp_xyz : int, optional
        The subsampling factor for the snapshot in the X, Y, and Z directions. Default is `4`.
    snap : bool, optional
        If `True` (default), snapshots will be saved. If `False`, snapshots are disabled but other monitoring settings remain active.

    Returns:
    --------
    monitor_strs : str
        A formatted string containing the monitoring settings (snapshots, seismograms, and log file information) to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - If `snap=True`, snapshots are enabled and saved according to the `tsnap_params` and `expname` values. Otherwise, snapshots are disabled but the rest of the monitoring settings remain in place.
    - The generated string includes settings for logging (`LOG_FILE`) and seismogram output (`SEIS_FILE`), with paths based on the `expname`.
    """
    if snap:
        snap_str = f'''"Snapshots" : "comment",
        "SNAP" : "4",
        "TSNAP1" : "%.2e",
        "TSNAP2" : "%.2e",
        "TSNAPINC" : "%.2e",
        "IDX" : "{sbsmp_xyz}",
        "IDY" : "{sbsmp_xyz}",
        "IDZ" : "{sbsmp_xyz}",
        "SNAP_FORMAT" : "3",
        "SNAP_FILE" : "./outputs/snap/%s",
        "SNAP_PLANE" : "2",''' % (tsnap_params[0],
                                  tsnap_params[1],
                                  tsnap_params[2],
                                  expname)
    else:
        snap_str = f'''"Snapshots" : "comment",
        "SNAP" : "0",
        "TSNAP1" : "%.2e",
        "TSNAP2" : "%.2e",
        "TSNAPINC" : "%.2e",
        "IDX" : "{sbsmp_xyz}",
        "IDY" : "{sbsmp_xyz}",
        "IDZ" : "{sbsmp_xyz}",
        "SNAP_FORMAT" : "3",
        "SNAP_FILE" : "./outputs/snap/%s",
        "SNAP_PLANE" : "2",''' % (tsnap_params[0],
                                  tsnap_params[1],
                                  tsnap_params[2],
                                  expname)

    smgrm_str = '''"Seismograms" : "comment",
    "NDT, NDTSHIFT" : "%i, 0",
    "SEIS_FORMAT" : "2",
    "SEIS_FILE" : "./outputs/su/%s",''' % (smgrm_dtfn, expname)

    log_str = '''"Monitoring the simulation" : "comment",
    "LOG_FILE" : "./outputs/log/%s.log",
    "LOG" : "1",
    "OUT_SOURCE_WAVELET" : "1",
    "OUT_TIMESTEP_INFO" : "10",
    ''' % (expname)

    monitor_strs = '\n \n'.join([snap_str, smgrm_str, log_str])

    return monitor_strs


def get_time_str(dt, tdur):
    """
    Generates the time-stepping parameter string for a SOFI3D JSON parameter file.

    This function creates a formatted string defining the time-stepping parameters for a SOFI3D simulation, including the total simulation duration (`TIME`) and the time step size (`DT`).

    Parameters:
    -----------
    dt : float
        The time step size for the simulation (`DT`), in seconds.
    tdur : float
        The total simulation duration (`TIME`), in seconds.

    Returns:
    --------
    t_str : str
        A formatted string containing the time-stepping parameters to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The `TIME` parameter defines the total time for the simulation, and `DT` defines the time increment for each step.
    """
    t_str = '''"Time Stepping" : "comment",
    "TIME" : "%.3f",
    "DT" : "%.2e",''' % (tdur, dt)

    return t_str


def get_subsurfmod_str(n_xzy, d_xzy, expname, moddir="./inputs/model/", np_xzy=[2,2,2]):
    """
    Generates the subsurface model and grid configuration string for a SOFI3D JSON parameter file.

    This function creates a formatted string that defines the 3D grid, model configuration, and domain decomposition for a SOFI3D simulation. The generated string includes details about the grid dimensions, cell sizes, model file paths, and the number of processors for domain decomposition.

    Parameters:
    -----------
    n_xzy : list or tuple of int
        The number of grid points in the X, Y, and Z directions (`NX`, `NY`, `NZ`).
    d_xzy : list or tuple of float
        The cell sizes in the X, Y, and Z directions (`DX`, `DY`, `DZ`), in meters.
    expname : str
        The name of the experiment. This is not directly used in this function but can be used in the model file paths or other parts of the parameter file.
    moddir : str, optional
        The directory path where the model files are stored. Default is `"./inputs/model/"`.
    np_xzy : list or tuple of int, optional
        The number of processors for domain decomposition in the X, Y, and Z directions (`NPROCX`, `NPROCY`, `NPROCZ`). Default is `[2, 2, 2]`.

    Returns:
    --------
    mod_strs : str
        A formatted string containing the 3D grid configuration, model settings, and domain decomposition parameters to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The `NX`, `NY`, and `NZ` parameters define the number of grid points in the X, Y, and Z directions.
    - The `DX`, `DY`, and `DZ` parameters define the cell sizes in meters for the grid.
    - The model files are read from the specified `moddir`, and the string includes settings for reading and writing model files.
    - Domain decomposition settings (`NPROCX`, `NPROCY`, `NPROCZ`) control how the grid is split across multiple processors.
    """

    mod_str1 = '''"3-D Grid" : "comment",
    "NX" : "%i",
    "NY" : "%i",
    "NZ" : "%i",
    "DX" : "%.4f",  # meters
    "DY" : "%.4f",  # meters
    "DZ" : "%.4f",  # meters
''' % (n_xzy[0], n_xzy[1], n_xzy[2],
       d_xzy[0], d_xzy[1], d_xzy[2],)

    mod_str2 = '''"Model" : "comment",
    "READMOD" : "1", # Read from file
    "MFILE" : "%s",
    "WRITE_MODELFILES" : "2",''' % (moddir)

    dom_decomp_str = '''"Domain Decomposition" : "comment",
    "NPROCX" : "%i",
    "NPROCY" : "%i",
    "NPROCZ" : "%i",
    '''% (np_xzy[0], np_xzy[1], np_xzy[2])

    mod_strs = '\n \n'.join([mod_str1, mod_str2, dom_decomp_str])
    return mod_strs


def get_source_str(sfile="./inputs/sources.dat", multisource=0):
    """
    Generates the source configuration string for a SOFI3D JSON parameter file.

    This function creates a formatted string that defines the source parameters for a SOFI3D simulation, including the source shape, type, and file path. It also handles settings for running multiple shots or reading the source from an external file.

    Parameters:
    -----------
    sfile : str, optional
        The file path for the source data (`SOURCE_FILE`). Default is `"./inputs/sources.dat"`.
    multisource : int, optional
        A flag indicating whether multiple shots are used (`RUN_MULTIPLE_SHOTS`). Set to `1` for multiple sources, or `0` for a single source. Default is `0`.

    Returns:
    --------
    src_str : str
        A formatted string containing the source parameters to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The `SOURCE_SHAPE` parameter is set to `1` for a Ricker wavelet.
    - The `SOURCE_TYPE` parameter is set to `1` for an explosive source.
    - The source configuration is read from the file specified by `sfile`.
    - The `RUN_MULTIPLE_SHOTS` parameter controls whether multiple sources are used in the simulation.
    """
    src_str = '''"Source" : "comment",
    "SOURCE_SHAPE" : "1",  # Ricker
    "SOURCE_TYPE" : "1",  # Explosive
    "SRCREC" : "1",  # Read from file
    "SOURCE_FILE" : "%s",
    "RUN_MULTIPLE_SHOTS" : "%i",
    "PLANE_WAVE_ANGLE" : "0.0",
    "TS" : "0.05",  # Duration of source-signal
    '''%(sfile, multisource)

    return src_str


def get_MTsource_str(strike, dip, rake, sfile="./inputs/sources.dat"):
    """
    Generates the source configuration string for a moment tensor (MT) source in a SOFI3D JSON parameter file.

    This function creates a formatted string that defines the source parameters for a moment tensor source, including the strike, dip, and rake angles. It also specifies the source shape and the file from which the source data is read.

    Parameters:
    -----------
    strike : float
        The strike angle of the moment tensor source, in degrees.
    dip : float
        The dip angle of the moment tensor source, in degrees.
    rake : float
        The rake angle of the moment tensor source, in degrees.
    sfile : str, optional
        The file path for the source data (`SOURCE_FILE`). Default is `"./inputs/sources.dat"`.

    Returns:
    --------
    src_str : str
        A formatted string containing the moment tensor source parameters to be included in a SOFI3D JSON parameter file.

    Notes:
    ------
    - The `SOURCE_SHAPE` parameter is set to `1` for a Ricker wavelet.
    - The `SOURCE_TYPE` parameter is set to `6` to indicate a moment tensor source.
    - The source configuration is read from the file specified by `sfile`.
    - The `RUN_MULTIPLE_SHOTS` parameter is set to `0`, indicating that only a single source is used in the simulation.
    """
    src_str = '''"Source" : "comment",
    "SOURCE_SHAPE" : "1",  # Ricker
    "SOURCE_TYPE" : "6",  # Explosive
    "SRCREC" : "1",  # Read from file
    "AMON" : "1",
    "STR" : "%.2f",  # Strike
    "DIP" : "%.2f",  # Dip
    "RAKE" : "%.2f",  # Rake
    "SOURCE_FILE" : "%s",
    "RUN_MULTIPLE_SHOTS" : "0",
    "PLANE_WAVE_ANGLE" : "0.0",
    "TS" : "0.05",  # Duration of source-signal
    '''%(strike, dip, rake, sfile)

    return src_str